name: Benchmark

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      branch_name:
        description: The name of the branch where benchmark results are pushed
        required: true
        default: benchmark
      commit_message:
        description: The message to use when committing updates
        required: false

env:
  BRANCH_NAME: ${{ github.event.inputs.branch_name || benchmark }}
  COMMIT_MESSAGE: ${{ github.event.inputs.commit_message || "Update benchmark results" }}

jobs:
  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Benchmark the 'install' step
        run: ./bench.sh install

      - name: Benchmark the 'load' step
        run: ./bench.sh load

      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install seaborn pandas

      - name: Create charts
        run: |
          ./chart.py install
          ./chart.py load

      - name: Push updated files to the ${{ env.BRANCH_NAME }} branch
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add -A
          git commit -m "${{ env.COMMIT_MESSAGE }}"
          git push -q -f origin HEAD:${{ env.BRANCH_NAME }}

      - name: Open a pull request from the ${{ env.BRANCH_NAME }} branch
        uses: actions/github-script@v3
        with:
          script: |
            const {owner, repo} = context.repo
            const branch = '${{ env.BRANCH_NAME }}'
            const title = '${{ env.COMMIT_MESSAGE }}'
            const branchesResult = await github.repos.listBranches({ owner, repo })
            if (branchesResult.status !== 200 || !branchesResult.data.find(({ name }) => name === branch)) {
              return
            }
            const prsResult = await github.pulls.list({ owner, repo, head: branch, state: 'open' })
            if (prsResult.status === 200 && prsResult.data.length === 0) {
              await github.pulls.create({ owner, repo, head: branch, title, base: 'master' })
            }
