name: Benchmark

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '@igetgames/master'
  workflow_dispatch:
    inputs:
      branch_name:
        description: The name of the branch where benchmark results are pushed
        required: true
        default: benchmark
      commit_message:
        description: The message to use when committing updates
        required: false

env:
  BRANCH_NAME: ${{ github.event.inputs.branch_name || 'benchmark' }}
  COMMIT_MESSAGE: ${{ github.event.inputs.commit_message || 'Update benchmark results' }}

jobs:
  benchmark:
    name: Benchmark ${{ matrix.kind }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        kind: [base, antibody, antigen, sheldon, zgen, zinit, zplug]
        os: [macos-latest]
        include:
          - kind: base
          - kind: antibody
            install: brew install antibody
            prepare: 'rm -rf "$HOME/.cache/antibody"'
            copy: '$GITHUB_WORKSPACE/src/antibody/plugins.txt:$HOME/.antibody/plugins.txt'
          - kind: antigen
            install: curl -fLsS -o "$HOME/antigen.zsh" https://git.io/antigen
            prepare: 'rm -rf "$HOME/.antigen"'
          - kind: sheldon
            install: brew install sheldon
            prepare: 'find "$HOME/.sheldon" -mindepth 1 -maxdepth 1 ! -name "plugins.toml" -exec rm -rf {} \;'
            copy: '$GITHUB_WORKSPACE/src/sheldon/plugins.toml:$HOME/.sheldon/plugins.toml'
          - kind: zgen
            install: git clone https://github.com/tarjoilija/zgen.git "$HOME/.zgen"
            prepare: 'git -C "$HOME/.zgen" clean -dffx'
          - kind: zinit
            install: mkdir -p "$HOME/.zinit" && git clone https://github.com/zdharma/zinit.git "$HOME/.zinit/bin"
            prepare: 'find "$HOME/.zinit" -mindepth 1 -maxdepth 1 ! -name "bin" -exec rm -rf {} \;'
          - kind: zplug
            install: git clone https://github.com/zplug/zplug "$HOME/.zplug"
            prepare: 'rm -rf "$HOME/.zplug/repos"'
    env:
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
    steps:
      - name: Install hyperfine
        run: brew install hyperfine
      - name: Install ${{ matrix.kind }}
        if: matrix.install != ''
        run: eval "${{ matrix.install }}"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Update ${{ matrix.kind }} .zshrc
        run: ./bench.sh --kind "${{ matrix.kind }}" update-plugins
        if: matrix.kind != 'base'

      - name: Copy ${{ matrix.kind }} .zshrc
        run: |
          cat "$GITHUB_WORKSPACE/src/${{ matrix.kind }}/zshrc" \
          | sed -e 's/\/root/\$HOME/g' > "$HOME/.zshrc"
      - name: Copy ${{ matrix.kind }} files
        if: matrix.copy != ''
        run: |
          mkdir -p "$HOME/.${{ matrix.kind }}"
          cp $(echo "${{ matrix.copy }}" | sed -e 's/:/ /')

      - name: DIAG - before install benchmark
        run: ls -la "$HOME" && env | sort

      - name: Benchmark the ${{ matrix.kind }} 'install' step
        run: |
          hyperfine \
          --prepare "${{ matrix.prepare }}" \
          --warmup 3 \
          --export-json "$GITHUB_WORKSPACE/results/install-${{ matrix.kind }}.json" \
          --show-output \
          'zsh -ic exit'

      - name: DIAG - after install benchmark / before load benchmark
        run: ls -la "$HOME/.${{ matrix.kind }}" && ls -la "$HOME/.${{ matrix.kind }}/plugins 2>/dev/null"

      - name: Benchmark the ${{ matrix.kind }} 'load' step
        run: |
          hyperfine \
          --warmup 3 \
          --export-json "$GITHUB_WORKSPACE/results/load-${{ matrix.kind }}.json" \
          --style color \
          'zsh -ic exit'

      # - name: Set up Python
      #   uses: actions/setup-python@v2

      # - name: Install Python dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     python -m pip install seaborn pandas

      # - name: Create charts
      #   run: |
      #     ./chart.py install
      #     ./chart.py load

      # - name: Push updated files to the benchmark branch
      #   run: |
      #     git config user.name github-actions
      #     git config user.email github-actions@github.com
      #     git add -A
      #     git commit -m "${{ env.COMMIT_MESSAGE }}"
      #     git push -q -f origin HEAD:refs/heads/${{ env.BRANCH_NAME }}

      # - name: Open a pull request to master
      #   uses: actions/github-script@v3
      #   with:
      #     script: |
      #       const {owner, repo} = context.repo
      #       const branch = '${{ env.BRANCH_NAME }}'
      #       const title = '${{ env.COMMIT_MESSAGE }}'
      #       const branchesResult = await github.repos.listBranches({ owner, repo })
      #       if (branchesResult.status !== 200 || !branchesResult.data.find(({ name }) => name === branch)) {
      #         return
      #       }
      #       const prsResult = await github.pulls.list({ owner, repo, head: branch, state: 'open' })
      #       if (prsResult.status === 200 && prsResult.data.length === 0) {
      #         await github.pulls.create({ owner, repo, head: branch, title, base: 'master' })
      #       }
